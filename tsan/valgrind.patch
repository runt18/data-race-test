Index: include/pub_tool_tooliface.h
===================================================================
--- include/pub_tool_tooliface.h	(revision 8942)
+++ include/pub_tool_tooliface.h	(working copy)
@@ -64,11 +64,23 @@
 
 /* Every tool must include this macro somewhere, exactly once. */
 #define VG_DETERMINE_INTERFACE_VERSION(pre_clo_init)           \
+const ToolInfo VG_(tool_info) = {                              \
+      sizeof_ToolInfo   : sizeof(ToolInfo),                    \
+      interface_version : VG_CORE_INTERFACE_VERSION,           \
+      tl_pre_clo_init   : pre_clo_init,                        \
+   };
+
+// The syntax above is non-standard, but supported by both 
+// gcc anf g++. The syntax below is part of C standard but not (yet)
+// a part of C++ standard and not (yet) supported by g++
+#if 0
+#define VG_DETERMINE_INTERFACE_VERSION(pre_clo_init)           \
    const ToolInfo VG_(tool_info) = {                           \
       .sizeof_ToolInfo   = sizeof(ToolInfo),                   \
       .interface_version = VG_CORE_INTERFACE_VERSION,          \
       .tl_pre_clo_init   = pre_clo_init,                       \
    };
+#endif
 
 /* ------------------------------------------------------------------ */
 /* Basic tool functions */
Index: include/pub_tool_libcassert.h
===================================================================
--- include/pub_tool_libcassert.h	(revision 8942)
+++ include/pub_tool_libcassert.h	(working copy)
@@ -31,18 +31,20 @@
 #ifndef __PUB_TOOL_LIBCBASSERT_H
 #define __PUB_TOOL_LIBCBASSERT_H
 
-#define tl_assert(expr)                                                 \
-  ((void) ((expr) ? 0 :                                                 \
-           (VG_(assert_fail) (/*isCore?*/False, #expr,                  \
-                              __FILE__, __LINE__, __PRETTY_FUNCTION__,  \
-                              ""),                                      \
+#define tl_assert(expr)                                               \
+((void) ((expr) ? 0 :                                                 \
+         (VG_(assert_fail) (/*isCore?*/False, (Char*)#expr,           \
+                              (Char*)__FILE__, __LINE__,              \
+                              (Char*)__PRETTY_FUNCTION__,             \
+                              ""),                                    \
                               0)))
 
-#define tl_assert2(expr, format, args...)                               \
-  ((void) ((expr) ? 0 :                                                 \
-           (VG_(assert_fail) (/*isCore?*/False, #expr,                  \
-                              __FILE__, __LINE__, __PRETTY_FUNCTION__,  \
-                              format, ##args),                          \
+#define tl_assert2(expr, format, args...)                             \
+  ((void) ((expr) ? 0 :                                               \
+           (VG_(assert_fail) (/*isCore?*/False, (Char*)#expr,         \
+                              (Char*)__FILE__, __LINE__,              \
+                              (Char*)__PRETTY_FUNCTION__,             \
+                              (const HChar*)format, ##args),          \
                               0)))
 
 __attribute__ ((__noreturn__))
Index: include/pub_tool_errormgr.h
===================================================================
--- include/pub_tool_errormgr.h	(revision 8942)
+++ include/pub_tool_errormgr.h	(working copy)
@@ -62,6 +62,14 @@
 Char*       VG_(get_error_string)  ( Error* err );
 void*       VG_(get_error_extra)   ( Error* err );
 
+
+typedef enum {
+  ERROR_IS_RECORDED,
+  ERROR_IS_SUPPRESSED,
+  ERROR_IS_IGNORED_AS_DUPLICATE,
+  ERROR_IS_IGNORED_DUE_TO_LIMIT
+} RecordErrorReturnType;
+
 /* Call this when an error occurs.  It will be recorded if it hasn't been
    seen before.  If it has, the existing error record will have its count
    incremented.
@@ -72,8 +80,10 @@
 
    If no 'a', 's' or 'extra' of interest needs to be recorded, just use
    NULL for them.  */
-extern void VG_(maybe_record_error) ( ThreadId tid, ErrorKind ekind,
-                                      Addr a, Char* s, void* extra );
+extern RecordErrorReturnType VG_(maybe_record_error) ( ThreadId tid, 
+                                                       ErrorKind ekind,
+                                                       Addr a, Char* s, 
+                                                       void* extra );
 
 /* Similar to VG_(maybe_record_error)(), except this one doesn't record the
    error -- useful for errors that can only happen once.  The errors can be
Index: configure.in
===================================================================
--- configure.in	(revision 8942)
+++ configure.in	(working copy)
@@ -1629,6 +1629,9 @@
    helgrind/Makefile
    helgrind/tests/Makefile
    helgrind/docs/Makefile
+   tsan/Makefile
+   tsan/tests/Makefile
+   tsan/docs/Makefile
    massif/Makefile
    massif/tests/Makefile
    massif/perf/Makefile
Index: Makefile.flags.am
===================================================================
--- Makefile.flags.am	(revision 8942)
+++ Makefile.flags.am	(working copy)
@@ -5,6 +5,7 @@
                  -Wpointer-arith -Wstrict-prototypes -Wmissing-declarations \
 		 @FLAG_W_NO_FORMAT_ZERO_LENGTH@ \
                  -fno-strict-aliasing
+AM_CXXFLAGS_BASE = -O2 -g -fno-exceptions -fno-rtti -Wall -Istlport
 
 # These flags are used for building the preload shared objects.
 # The aim is to give reasonable performance but also to have good
@@ -17,33 +18,41 @@
 AM_CPPFLAGS_X86_LINUX     = $(add_includes_x86_linux)
 AM_CFLAGS_X86_LINUX       = $(WERROR) @FLAG_M32@ @PREFERRED_STACK_BOUNDARY@ \
 			 	$(AM_CFLAGS_BASE)
+AM_CXXFLAGS_X86_LINUX       = $(WERROR) @FLAG_M32@ @PREFERRED_STACK_BOUNDARY@ \
+			 	$(AM_CXXFLAGS_BASE)
 AM_CCASFLAGS_X86_LINUX    = $(add_includes_x86_linux) @FLAG_M32@ -g
 
 AM_FLAG_M3264_AMD64_LINUX = @FLAG_M64@
 AM_CPPFLAGS_AMD64_LINUX   = $(add_includes_amd64_linux)
 AM_CFLAGS_AMD64_LINUX     = $(WERROR) @FLAG_M64@ -fomit-frame-pointer \
 				@PREFERRED_STACK_BOUNDARY@ $(AM_CFLAGS_BASE)
+AM_CXXFLAGS_AMD64_LINUX     = $(WERROR) @FLAG_M64@ -fomit-frame-pointer \
+				@PREFERRED_STACK_BOUNDARY@ $(AM_CXXFLAGS_BASE)
 AM_CCASFLAGS_AMD64_LINUX  = $(add_includes_amd64_linux) @FLAG_M64@ -g
 
 AM_FLAG_M3264_PPC32_LINUX = @FLAG_M32@
 AM_CPPFLAGS_PPC32_LINUX   = $(add_includes_ppc32_linux)
 AM_CFLAGS_PPC32_LINUX     = $(WERROR) @FLAG_M32@ $(AM_CFLAGS_BASE)
+AM_CXXFLAGS_PPC32_LINUX     = $(WERROR) @FLAG_M32@ $(AM_CXXFLAGS_BASE)
 AM_CCASFLAGS_PPC32_LINUX  = $(add_includes_ppc32_linux) -Wa,-maltivec @FLAG_M32@ -g
 
 AM_FLAG_M3264_PPC64_LINUX = @FLAG_M64@
 AM_CPPFLAGS_PPC64_LINUX   = $(add_includes_ppc64_linux)
 AM_CFLAGS_PPC64_LINUX     = $(WERROR) @FLAG_M64@ $(AM_CFLAGS_BASE)
+AM_CXXFLAGS_PPC64_LINUX     = $(WERROR) @FLAG_M64@ $(AM_CXXFLAGS_BASE)
 AM_CCASFLAGS_PPC64_LINUX  = $(add_includes_ppc64_linux) -Wa,-maltivec @FLAG_M64@ -g
 
 AM_FLAG_M3264_PPC32_AIX5  = @FLAG_MAIX32@
 AM_CPPFLAGS_PPC32_AIX5    = $(add_includes_ppc32_aix5)
 AM_CFLAGS_PPC32_AIX5      = $(WERROR) @FLAG_MAIX32@ -mcpu=powerpc $(AM_CFLAGS_BASE)
+AM_CXXFLAGS_PPC32_AIX5      = $(WERROR) @FLAG_MAIX32@ -mcpu=powerpc $(AM_CXXFLAGS_BASE)
 AM_CCASFLAGS_PPC32_AIX5   = $(add_includes_ppc32_aix5) \
 				@FLAG_MAIX32@ -mcpu=powerpc -g
 
 AM_FLAG_M3264_PPC64_AIX5  = @FLAG_MAIX64@
 AM_CPPFLAGS_PPC64_AIX5    = $(add_includes_ppc64_aix5)
 AM_CFLAGS_PPC64_AIX5      = $(WERROR) @FLAG_MAIX64@ -mcpu=powerpc64 $(AM_CFLAGS_BASE)
+AM_CXXFLAGS_PPC64_AIX5      = $(WERROR) @FLAG_MAIX64@ -mcpu=powerpc64 $(AM_CXXFLAGS_BASE)
 AM_CCASFLAGS_PPC64_AIX5   = $(add_includes_ppc64_aix5) \
 				@FLAG_MAIX64@ -mcpu=powerpc64 -g
 
@@ -54,6 +63,7 @@
 AM_FLAG_M3264_PRI = $(AM_FLAG_M3264_@VG_PLATFORM_PRI@)
 AM_CPPFLAGS_PRI   = $(AM_CPPFLAGS_@VG_PLATFORM_PRI@)
 AM_CFLAGS_PRI     = $(AM_CFLAGS_@VG_PLATFORM_PRI@)
+AM_CXXFLAGS_PRI     = $(AM_CXXFLAGS_@VG_PLATFORM_PRI@)
 AM_CCASFLAGS_PRI  = $(AM_CCASFLAGS_@VG_PLATFORM_PRI@)
 
 if VGP_HAVE_SECONDARY
Index: Makefile.am
===================================================================
--- Makefile.am	(revision 8942)
+++ Makefile.am	(working copy)
@@ -10,6 +10,7 @@
 		lackey \
 		none \
 		helgrind \
+		tsan \
 		drd
 
 EXP_TOOLS = 	exp-omega \
Index: coregrind/m_errormgr.c
===================================================================
--- coregrind/m_errormgr.c	(revision 8942)
+++ coregrind/m_errormgr.c	(working copy)
@@ -482,7 +482,7 @@
 /* Top-level entry point to the error management subsystem.
    All detected errors are notified here; this routine decides if/when the
    user should see the error. */
-void VG_(maybe_record_error) ( ThreadId tid, 
+RecordErrorReturnType VG_(maybe_record_error) ( ThreadId tid, 
                                ErrorKind ekind, Addr a, Char* s, void* extra )
 {
           Error  err;
@@ -529,7 +529,7 @@
          VG_(message)(Vg_UserMsg, "");
          stopping_message = True;
       }
-      return;
+      return ERROR_IS_IGNORED_DUE_TO_LIMIT;
    }
 
    /* After M_COLLECT_ERRORS_SLOWLY_AFTER different errors have
@@ -577,8 +577,7 @@
             p->next      = errors;
             errors       = p;
 	 }
-
-         return;
+         return p->supp ? ERROR_IS_SUPPRESSED : ERROR_IS_IGNORED_AS_DUPLICATE;
       }
       p_prev = p;
       p      = p->next;
@@ -636,9 +635,11 @@
       is_first_shown_context = False;
       n_errs_shown++;
       do_actions_on_error(p, /*allow_db_attach*/True);
+      return ERROR_IS_RECORDED;
    } else {
       n_errs_suppressed++;
       p->supp->count++;
+      return ERROR_IS_SUPPRESSED;
    }
 }
 
