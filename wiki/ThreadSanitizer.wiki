#summary ThreadSanitizer is an experimental Valgrind-based detector of data races

=THIS PAGE IS UNDER CONSTRUCTION=
Come back later for a complete documentation, but feel free to ask questions at any time. 

<wiki:toc max_depth="1" />


= Introduction =

*ThreadSanitizer* (aka *tsan*) is an experimental data race detector. 
It is similar to Helgrind in many ways, but it also has several 
differences. 

See also: ThreadSanitizerAlgorithm, ThreadSanitizerIgnores, ThreadSanitizerVsOthers


= Using ThreadSanitizer =
Just like any other valgrind-based tool: 
{{{
valgrind [valgrind options] --tool=tsan [tsan options] your/program [program options]
}}}

= Building ThreadSanitizer =
ThreadSanitizer is not a part of the official valgrind distribution, so you will 
have to download valgrind and ThreadSanitizer separately. You will also have to 
apply a small patch to valgrind. Just paste the following script into your terminal window.

{{{
# Get valgrind trunk revision 8942 (the one we used so far).
# This will create directory 'valgrind'.
svn co svn://svn.valgrind.org/valgrind/trunk -r 8942 valgrind
# Get ThreadSanitizer trunk. Will create directory 'tsan'.
svn checkout http://data-race-test.googlecode.com/svn/trunk/tsan tsan
# Create symlinks of tsan files (and some dummy files) in valgrind directory
cd valgrind
mkdir tsan
cd tsan
ln -s ../../tsan/[A-Za-z]* .
mkdir docs tests
touch docs/Makefile.am tests/Makefile.am
# Apply a patch to the valgrind files.
cd ../
patch -p 0 < tsan/valgrind.patch
# Build the whole thing.
./autogen.sh && ./configure --prefix=`pwd`/inst && make install
# Done.
}}}

= Command line flags = 
|| --keep-history=0|1|2          || 1   ||  Keep the history of the previous accesses. <BR> Setting this option to zero will make the tool run 10%-30% faster, but will make the reports less informative. <BR> Use --keep-history=0 in continuous builds, and --keep-history=1 when analyzing reports. <BR> Values greater than 1 are experimental. ||
|| *Analysis sensitivity flags:* ||     || ThreadSanitizer can work in different modes that affect accuracy (number of detected bugs, number of false reports) and speed.||
||  --fast-mode=yes|no           || yes ||  Be faster, but miss some races. ||
||  --pure-happens-before=yes|no || no  || Act as a pure happens-before detector. Useful if you are testing a code which has a lot of custom not annotated synchronization (e.g. message passing. See also DynamicAnnotations (TODO)) ||
||  --ignore-in-dtor=yes|no      || yes || Ignore reports with a Destructor in stack trace. ||
||        *Interface flags:*     ||     ||      Flags that affect the generated output. ||
||  --color                      ||  no ||  Add colors to the output (uses http://en.wikipedia.org/wiki/ANSI_escape_code). ||
||  --show-pc                    || no  || Show pc (program counter) in the stack traces. ||
||  --announce-threads           || no  || Show the the stack traces of thread creation . ||
||  --file_prefix_to_cut=file_prefix || ||   Remove `"^.*file_prefix"` from the printed file names.  You may pass this flag several times. ||

= Screenshot= 
ThreadSanitizer's output viewed in [http://www.vim.org vim] with syntax highlightning and 
source code in the second window: 

 http://data-race-test.googlecode.com/svn/trunk/images/tsan-in-vim3.png