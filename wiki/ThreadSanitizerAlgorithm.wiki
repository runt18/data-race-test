#summary Data race detection algorithm used by ThreadSanitizer.

*UNDER CONSTRUCTION!*

<wiki:toc max_depth="1" />

=Definitions=

*Tid* (thread id): a unique number identifying a thread of the running program.

*Addr* (address):  a pointer to the memory of the running program (a 64-bit number on a 64-bit system).

*Event-Type*: one of  `Read`, `Write` (memory access events),
`Wrlock`, `Rdlock`, `Wrunlock`, `Rdunlock` (locking events),
`Signal`, `Wait` (happens-before events).

*Event*: a triple `{Event-Type, Tid, Addr}`. 
We will write `Event-Type(Tid,Addr)` or `Event-Type(Addr)` if `Tid` is obvious from the context.

*Lock*: an  address that appeared in a locking event. <BR>
A lock `L` is *wr-held* by a thread `T` at a given point of time if the number of events
`Wrlock(T,L)` observed so far is greater than the number of events `Wrunlock(T,L)`. <BR>
A lock `L` is *rd-held* by thread `T` if it is wr-held by `T` or if the
number of events `Rdlock(T,L)` is greter than the number of events `Rdunlock(T,L)`.

*Lock Set*: (`LS`) a set of locks. <BR>
*Writer Lock Set* (`LSwr`): the set of all wr-held locks of a given thread. <BR>
*Reader Lock Set* (`LSrd`): the set of all rd-held locks of a given thread. <BR>
*Event Lock Set*:  `LSwr` for a `Write` event and `LSrd` for a `Read` event.


*Happens-before arc*: a pair of events `X=Signal(Tx,Ax)` and `Y=Wait(Ty,Ay)` such that   `Ax = Ay`, `Tx != Ty` and `X` is observed first.



*Happens-before*: a partial order on the set of events. <BR>
Given two events `X=TypeX(Tx,Ax)` and `Y=TypeY(Ty,Ay)` 
the event `X` *happens-before* or *preceedes* the event `Y` (in short, `X < Y`) if `X` has been observed before `Y` and at least on of the following statements is true:
  * `Tx = Ty`
  * `{X,Y}` is a happens-before arc.
  * There exist two events `E1` and `E2`, such that `X <= E1 < E2 <= Y` (i.e. happens-before is transitive).

*Context of event*: information that allows the users to understand where the given event has appeared. Usually, the context is a stack trace (TODO).

*Segment*: a sequence of events of one thread that contains no
synchronization events. The context of a segment is the context of the
first event in the segment. Each segment has it's writer and reader Lock Sets.

http://data-race-test.googlecode.com/svn/trunk/msm/exa3.png

The figure above shows three different threads divided into segments.
  * `S1 < S4` because these segments are in the same thread.
  * `S1 < S5` due to happens-before arc created by `Signal(T1,H1)` and `Wait(T2,H2)`.
  * `S1 < S7` because happens-before is transitive.
  * `!(S4 < S2)` (`S4` does not happen-before `S2`) 


*Segment Set*: a set of segments such that none of the segments in the set happens-before another segment.

*Concurrent*: two memory access events are *concurrent* if non of them happens-before another one and the intresection of the lock sets of these events is empty.

*Data Race*: a situation where there are two concurrent memory access events
with the same address and at least one of the events is `Write`.






=State machine=
=Pure happens-before mode= 
=Fast mode=
=Implementation details=