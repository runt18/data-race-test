#summary Dynamic Annotations are used to annotate custom synchronization utilities

= Introduction =

*UNDER CONSTRUCTION* 

Dynamic annotation is a source code annotation that affects
the generated code (that is, the annotation is not a comment).
Each such annotation is attached to a particular
instruction and/or to a particular object (address) in the program.

Dynamic annotations could be used to pass various kinds of information to dynamic analysis tools, 
such as Memcheck, Helgrind or !ThreadSanitizer. 

In order to use the dynamic annotations you need to include 
[http://code.google.com/p/google-perftools/source/browse/trunk/src/base/dynamic_annotations.h dynamic_annotations.h]
and link with
[http://code.google.com/p/google-perftools/source/browse/trunk/src/base/dynamic_annotations.cc dynamic_annotations.cc].


*TODO*: add examples. 

=Custom memory allocation= 

=pthread_cond_wait loop=

=Custom synchronization=
==Message queue==
==Free lists==
==Reference counting==
=Safe publication=
=Pure happens-before Muitex=
=FIFO queues= 
=Benign races=
=Racey reads=
=Custom locks=
=Expected races in unittests= 



